
name: Tests && Deploy && Migration

on: 
  push:
    branches:
      - main

jobs:
  lint:
    name: Run tests
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        python-version: [3.9.1]

    services:
      postgres:
        image: postgres:11.5-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@master

      - name: Set up Python
        uses: actions/setup-python@v2.3.2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.1.12"
          virtualenvs-in-project: true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-py-${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run tests
        env:
          SECRET_KEY: secret_key
          DATABASE_URL: postgresql://postgres:postgres@localhost/postgres
        run: |
          poetry run alembic upgrade head
          poetry run pytest
  deploy:
    name: Deploy
    needs: lint
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        python-version: [3.9.1]
    steps:
      - uses: actions/checkout@master

      - name: Set up Python
        uses: actions/setup-python@v2.3.2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.1.12"
          virtualenvs-in-project: true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-py-${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Migration production
        env:
          POSTGRES_DB: api_db
          DATABASE_URL: ${{secrets.DATABASE_URL}}
          POSTGRES_PORT: 5432
          POSTGRES_USER: ignets_admin
          app_env: prod
          SECRET_KEY: ${{secrets.SECRET}}
          POSTGRS_PASSWORD: ${{secrets.DB_PASS}}
        run: |
          poetry run alembic upgrade head
      - name: Remove files .
        run: |
          rm -rf .venv
      - name: Copy SSH build to EC2
        uses: garygrossgarten/github-action-scp@release
        with:
          host: ec2-54-85-50-240.compute-1.amazonaws.com
          username: ubuntu
          privateKey: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSWORD }}
          port: 22
          local: "."
          remote: "/home/ubuntu/api/"
      - name: Update API
        uses: appleboy/ssh-action@master
        with:
          host: ec2-54-85-50-240.compute-1.amazonaws.com
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSWORD }}
          port: 22
          script: |
            cd ~/api
            poetry install
            poetry shell
            poetry run uvicorn --host=0.0.0.0 app.main:app --reload
